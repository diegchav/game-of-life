{"version":3,"sources":["constants/index.js","contexts/Theme.js","components/styles/StyledGameTitle.js","components/GameTitle.js","components/styles/StyledGridCell.js","components/GridCell.js","components/styles/StyledGridRow.js","components/GridRow.js","components/styles/StyledGameGrid.js","components/GameGrid.js","components/styles/StyledSlider.js","components/Slider.js","components/styles/StyledGameControls.js","components/GameControls.js","helpers/theme.helpers.js","components/styles/StyledGameLayout.js","helpers/game.helpers.js","components/GameLayout.js","App.js","serviceWorker.js","index.js"],"names":["GRID_SIZE","MIN_UPDATE_INTERVAL","MAX_UPDATE_INTERVAL","UPDATE_INTERVAL","THEMES","name","primaryColor","secundaryColorLight","secundaryColorDark","ThemeContext","React","createContext","StyledGameTitle","styled","div","props","backgroundColor","propTypes","PropTypes","string","isRequired","GameTitle","Consumer","theme","StyledGridCell","aliveBackground","deadBackground","defaultProps","GridCell","value","className","StyledGridRow","width","GridRow","row","length","map","cell","i","key","StyledGameGrid","height","GameGrid","grid","StyledSlider","labelColor","labelSize","trackBackground","thumbBackground","Slider","label","min","max","step","onChange","type","StyledGameControls","GameControls","gridSize","speed","onChangeGridSize","onChangeSpeed","getRandomTheme","themes","Math","floor","random","hexColor2Rgb","hexColor","replace","Error","r","parseInt","g","b","StyledGameLayout","boxShadowColor","generateGrid","Array","from","generatePopulation","oldPopulation","oldPopulationWidth","oldPopulationHeight","j","getNumAliveNeighbors","x","y","maxWidth","maxHeight","numAliveNeighbors","updatePopulation","newPopulation","GameLayout","useState","setGrid","setGridSize","setSpeed","handleChangeGridSize","event","newGridSize","target","handleChangeSpeed","newInterval","useEffect","interval","setInterval","clearInterval","StyledApp","App","setTheme","Provider","onThemeChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f8cb4ff.chunk.js","sourcesContent":["// Grid\nexport const MIN_GRID_SIZE = 10;\nexport const MAX_GRID_SIZE = 50;\nexport const GRID_SIZE = 30;\nexport const GRID_SIZE_STEP = 10;\n\n// Update speed\nexport const MIN_UPDATE_INTERVAL = 100;\nexport const MAX_UPDATE_INTERVAL = 900;\nexport const UPDATE_INTERVAL = 500;\nexport const UPDATE_INTERVAL_STEP = 200;\n\n// Theme\nexport const THEME_GREEN = 'green';\nexport const THEME_PURPLE = 'purple';\nexport const THEME_BLUE = 'blue';\nexport const THEME_GREY = 'grey';\nexport const THEME_RED = 'red';\nexport const THEME_ORANGE = 'orange';\nexport const THEMES = {\n  [THEME_GREEN]: {\n    name: THEME_GREEN,\n    primaryColor: '#00838f',\n    secundaryColorLight: '#4fb3bf',\n    secundaryColorDark: '#005662'\n  },\n  [THEME_PURPLE]: {\n    primaryColor: '#9c27b0',\n    secundaryColorLight: '#d05ce3',\n    secundaryColorDark: '#6a0080'\n  },\n  [THEME_BLUE]: {\n    primaryColor: '#01579b',\n    secundaryColorLight: '#4f83cc',\n    secundaryColorDark: '#002f6c'\n  },\n  [THEME_GREY]: {\n    primaryColor: '#757575',\n    secundaryColorLight: '#a4a4a4',\n    secundaryColorDark: '#494949'\n  },\n  [THEME_RED]: {\n    primaryColor: '#e57373',\n    secundaryColorLight: '#ffa4a2',\n    secundaryColorDark: '#af4448'  \n  },\n  [THEME_ORANGE]: {\n    primaryColor: '#ffb74d',\n    secundaryColorLight: '#ffe97d',\n    secundaryColorDark: '#c88719'\n  }\n};","import React from 'react';\n\nimport {\n  THEMES,\n  THEME_GREEN\n} from '../constants';\n\nexport const ThemeContext = React.createContext(THEMES[THEME_GREEN]);","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledGameTitle = styled.div`\n  background: ${props => props.backgroundColor};\n  width: 100%;\n  text-align: center;\n`;\n\nStyledGameTitle.propTypes = {\n  backgroundColor: PropTypes.string.isRequired\n};\n\nexport default StyledGameTitle;","import React from 'react';\n\nimport { ThemeContext } from '../contexts/Theme';\n\nimport StyledGameTitle from './styles/StyledGameTitle';\n\nconst GameTitle = () => (\n  <ThemeContext.Consumer>\n    {theme => (\n      <StyledGameTitle backgroundColor={theme.primaryColor}>\n        <p>Game of Life</p>\n      </StyledGameTitle>\n    )}\n  </ThemeContext.Consumer>\n);\n\nexport default GameTitle;","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledGridCell = styled.div`\n  &.alive {\n    background: ${props => props.aliveBackground};\n  }\n\n  &.dead {\n    background: ${props => props.deadBackground};\n  }\n`;\n\nStyledGridCell.defaultProps = {\n  deadBackground: '#fff'\n};\n\nStyledGridCell.propTypes = {\n  aliveBackground: PropTypes.string.isRequired\n};\n\nexport default StyledGridCell;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ThemeContext } from '../contexts/Theme';\n\nimport StyledGridCell from './styles/StyledGridCell';\n\nconst GridCell = ({ value }) => (\n  <ThemeContext.Consumer>\n    {theme => (\n      <StyledGridCell\n        className={value ? 'alive' : 'dead'}\n        aliveBackground={theme.secundaryColorLight} />\n    )}\n  </ThemeContext.Consumer>\n);\n\nGridCell.propTypes = {\n  value: PropTypes.number.isRequired\n};\n\nexport default GridCell;","import styled from 'styled-components';\n\nconst StyledGridRow = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 0;\n`;\n\nexport default StyledGridRow;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GridCell from './GridCell';\n\nimport StyledGridRow from './styles/StyledGridRow';\n\nconst GridRow = ({ row }) => (\n  <StyledGridRow width={row.length}>\n    {row.map((cell, i) => <GridCell key={i} value={cell} />)}\n  </StyledGridRow>\n);\n\nGridRow.propTypes = {\n  row: PropTypes.array.isRequired\n};\n\nexport default GridRow;","import styled from 'styled-components';\n\nconst StyledGameGrid = styled.div`\n  display: grid;\n  grid-template-rows: repeat(${props => props.height}, 1fr);\n  grid-gap: 0;\n  width: 100%;\n  height: 80vh;\n`;\n\nexport default StyledGameGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GridRow from './GridRow';\n\nimport StyledGameGrid from './styles/StyledGameGrid';\n\nconst GameGrid = ({ grid }) => (\n  <StyledGameGrid height={grid.length}>\n    {grid.map((row, i) => <GridRow key={i} row={row} />)}\n  </StyledGameGrid>\n);\n\nGameGrid.propTypes = {\n  grid: PropTypes.array.isRequired\n};\n\nexport default GameGrid;","import styled from 'styled-components';\n\nconst StyledSlider = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0 5px;\n\n  span {\n    margin-right: 5px;\n    color: ${props => props.labelColor};\n    font-size: ${props => props.labelSize};\n  }\n\n  input[type=range] {\n    -webkit-appearance: none;\n    background: transparent;\n    margin: 0;\n    padding: 0;\n  }\n\n  input[type=range]:focus {\n    outline: none;\n  }\n\n  /* Track  */\n  input[type=range]::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    box-shadow: 0px 0px 0px #000;\n    background: ${props => props.trackBackground};\n  }\n\n  input[type=range]::-moz-range-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    box-shadow: 0px 0px 0px #000;\n    background: ${props => props.trackBackground};\n  }\n\n  input[type=range]::-ms-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    background: transparent;\n    border-color: transparent;\n    color: transparent;\n  }\n\n  input[type=range]::-ms-fill-lower {\n    background: ${props => props.trackBackground};\n    border: 0px solid #000;\n    box-shadow: 0px 0px 0px #000;\n  }\n\n  input[type=range]::-ms-fill-upper {\n    background: ${props => props.trackBackground};\n    border: 0px solid #000;\n    box-shadow: 0px 0px 0px #000;\n  }\n\n  /* Thumb  */\n  input[type=range]::-webkit-slider-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    -webkit-appearance: none;\n    margin-top: -5px;\n  }\n\n  input[type=range]::-moz-range-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    margin-top: -5px;\n  }\n\n  input[type=range]::-ms-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    margin-top: -5px;\n  }\n`;\n\nStyledSlider.defaultProps = {\n  trackBackground: '#9ea7aa',\n  thumbBackground: '#cfd8dc',\n  labelColor: '#9ea7aa',\n  labelSize: '0.75rem'\n};\n\nexport default StyledSlider;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport StyledSlider from './styles/StyledSlider';\n\nconst Slider = ({ label, min, max, step, value, trackBackground, thumbBackground, onChange }) => (\n  <StyledSlider trackBackground={trackBackground} thumbBackground={thumbBackground}>\n    <span>\n      {label}\n    </span>\n    <input\n      type=\"range\"\n      min={min}\n      max={max}\n      step={step}\n      value={value}\n      onChange={onChange} />\n  </StyledSlider>\n);\n\nSlider.propTypes = {\n  label: PropTypes.string.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  trackBackground: PropTypes.string,\n  thumbBackground: PropTypes.string\n};\n\nexport default Slider;","import styled from 'styled-components';\n\nconst StyledGameControls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n  height: 20px;\n  padding: 15px 0;\n  background: ${props => props.theme.backgroundColor};\n`;\n\nStyledGameControls.defaultProps = {\n  theme: {\n    backgroundColor: '#f5f5f6'\n  }\n};\n\nexport default StyledGameControls;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Slider from './Slider';\nimport { ThemeContext } from '../contexts/Theme';\n\nimport StyledGameControls from './styles/StyledGameControls';\n\nimport {\n  MIN_GRID_SIZE,\n  MAX_GRID_SIZE,\n  GRID_SIZE_STEP,\n  MIN_UPDATE_INTERVAL,\n  MAX_UPDATE_INTERVAL,\n  UPDATE_INTERVAL_STEP\n} from '../constants';\n\nconst GameControls = ({ gridSize, speed, onChangeGridSize, onChangeSpeed }) => (\n  <ThemeContext.Consumer>\n    {theme => (\n      <StyledGameControls>\n        <Slider\n          label=\"Grid Size\"\n          min={MIN_GRID_SIZE}\n          max={MAX_GRID_SIZE}\n          step={GRID_SIZE_STEP}\n          value={gridSize}\n          trackBackground={theme.secundaryColorLight}\n          thumbBackground={theme.primaryColor}\n          onChange={onChangeGridSize} />\n        <Slider\n          label=\"Speed\"\n          min={MIN_UPDATE_INTERVAL}\n          max={MAX_UPDATE_INTERVAL}\n          step={UPDATE_INTERVAL_STEP}\n          value={speed}\n          trackBackground={theme.secundaryColorLight}\n          thumbBackground={theme.primaryColor}\n          onChange={onChangeSpeed} />\n      </StyledGameControls>\n    )}\n  </ThemeContext.Consumer>\n);\n\nGameControls.propTypes = {\n  gridSize: PropTypes.number.isRequired,\n  speed: PropTypes.number.isRequired,\n  onChangeGridSize: PropTypes.func.isRequired,\n  onChangeSpeed: PropTypes.func.isRequired\n};\n\nexport default GameControls;","import {\n  THEME_GREEN,\n  THEME_PURPLE,\n  THEME_BLUE,\n  THEME_GREY,\n  THEME_RED,\n  THEME_ORANGE\n} from '../constants';\n\nexport const getRandomTheme = () => {\n  const themes = [\n    THEME_GREEN,\n    THEME_PURPLE,\n    THEME_BLUE,\n    THEME_GREY,\n    THEME_RED,\n    THEME_ORANGE\n  ];\n\n  return themes[Math.floor(Math.random() * themes.length)];\n};\n\n/*\n* Convert a color represented in hexadecimal into its rgb equivalent.\n*\n* Ex: 'eb4034' -> '235, 64, 52'\n*/\nexport const hexColor2Rgb = (hexColor) => {\n  // Remove hash symbol.\n  hexColor = hexColor.replace(/#/g, '');\n\n  // Accept only 6-digit hex colors.\n  if (hexColor.length !== 6) {\n    throw new Error('Invalid hex color: ', hexColor);\n  }\n\n  const r = parseInt(hexColor, 16) >> 16;\n  const g = (parseInt(hexColor, 16) >> 8) & 255;\n  const b = parseInt(hexColor, 16) & 255;\n\n  return `${r}, ${g}, ${b}`;\n};","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport { hexColor2Rgb } from '../../helpers/theme.helpers';\n\nconst StyledGameLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 70vw;\n  -webkit-box-shadow: 0 0 8px 8px rgba(${props => hexColor2Rgb(props.boxShadowColor)}, 0.3);\n  -moz-box-shadow: 0 0 8px 8px rgba(${props => hexColor2Rgb(props.boxShadowColor)}, 0.3);\n  box-shadow: 0 0 8px 8px rgba(${props => hexColor2Rgb(props.boxShadowColor)}, 0.3);\n`;\n\nStyledGameLayout.propTypes = {\n  boxShadowColor: PropTypes.string.isRequired\n};\n\nexport default StyledGameLayout;","export const generateGrid = gridSize => {\n  const grid = Array.from(Array(gridSize), () =>\n    new Array(gridSize));\n\n  return grid;\n}\n\nexport const generatePopulation = (gridSize, oldPopulation = null) => {\n  const grid = generateGrid(gridSize);\n  const oldPopulationWidth = (oldPopulation && oldPopulation.length) || 0;\n  const oldPopulationHeight = (oldPopulation && oldPopulation[0].length) || 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      // Eiter populate a random value or get it from the old population.\n      if (oldPopulation && i < oldPopulationWidth && j < oldPopulationHeight) {\n        grid[i][j] = oldPopulation[i][j];\n      } else {\n        grid[i][j] = Math.floor(Math.random() * 2);\n      }\n    }\n  }\n  return grid;\n};\n\nconst getNumAliveNeighbors = (grid, x, y) => {\n  const maxWidth = grid.length - 1;\n  const maxHeight = grid[0].length - 1;\n  let numAliveNeighbors = 0;\n  for (let i = Math.max(0, x - 1); i <= Math.min(x + 1, maxWidth); i++) {\n    for (let j = Math.max(0, y - 1); j <= Math.min(y + 1, maxHeight); j++) {\n      numAliveNeighbors += grid[i][j];\n    }\n  }\n  return numAliveNeighbors - grid[x][y];\n};\n\nexport const updatePopulation = (oldPopulation) => {\n  const newPopulation = [...oldPopulation];\n  for (let i = 0; i < newPopulation.length; i++) {\n    for (let j = 0; j < newPopulation[0].length; j++) {\n      const numAliveNeighbors = getNumAliveNeighbors(oldPopulation, i, j);\n      if (oldPopulation[i][j]) {\n        if (numAliveNeighbors <= 1) {\n          newPopulation[i][j] = 0;\n        } else if (numAliveNeighbors >= 4) {\n          newPopulation[i][j] = 0;\n        } else {\n          newPopulation[i][j] = 1;\n        }\n      } else {\n        if (numAliveNeighbors === 3) {\n          newPopulation[i][j] = 1;\n        }\n      }\n    }\n  }\n  return newPopulation;\n};","import React, { useState, useEffect } from 'react';\n\nimport GameTitle from './GameTitle';\nimport GameGrid from './GameGrid';\nimport GameControls from './GameControls';\nimport { ThemeContext } from '../contexts/Theme';\n\nimport StyledGameLayout from './styles/StyledGameLayout';\n\nimport { generatePopulation, updatePopulation } from '../helpers/game.helpers';\n\nimport {\n  GRID_SIZE,\n  UPDATE_INTERVAL,\n  MIN_UPDATE_INTERVAL,\n  MAX_UPDATE_INTERVAL\n} from '../constants';\n\nfunction GameLayout() {\n  const [ grid, setGrid ] = useState(generatePopulation(GRID_SIZE));\n  const [ gridSize, setGridSize ] = useState(GRID_SIZE);\n  const [ speed, setSpeed ] = useState(UPDATE_INTERVAL);\n\n  // Update grid every 'speed' milliseconds.\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setGrid(updatePopulation(grid));\n    }, (MAX_UPDATE_INTERVAL + MIN_UPDATE_INTERVAL - speed));\n\n    return () => clearInterval(interval);\n  });\n\n  function handleChangeGridSize(event) {\n    const newGridSize = parseInt(event.target.value);\n    const oldPopulation = [...grid];\n    const newPopulation = generatePopulation(newGridSize, oldPopulation);\n    setGridSize(newGridSize);\n    setGrid(newPopulation);\n  };\n\n  function handleChangeSpeed(event) {\n    const newInterval = parseInt(event.target.value);\n    setSpeed(newInterval);\n  };\n  \n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <StyledGameLayout boxShadowColor={theme.secundaryColorDark}>\n          <GameTitle />\n          <GameGrid grid={grid} />\n          <GameControls\n            gridSize={gridSize}\n            speed={speed}\n            onChangeGridSize={handleChangeGridSize}\n            onChangeSpeed={handleChangeSpeed} />\n        </StyledGameLayout>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n\nexport default GameLayout;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from'prop-types';\n\nimport GameLayout from './components/GameLayout';\nimport { ThemeContext } from './contexts/Theme';\n\nimport { getRandomTheme } from './helpers/theme.helpers';\n\nimport {\n  THEMES\n} from './constants';\n\nconst StyledApp = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  /* background: ${props => props.backgroundColor}; */\n`;\n\nStyledApp.propTypes = {\n  backgroundColor: PropTypes.string.isRequired\n};\n\nfunction App() {\n  const [theme, setTheme] = useState(THEMES[getRandomTheme()]);\n\n  function handleChangeTheme(theme) {\n    setTheme(THEMES[theme]);\n  }\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <StyledApp backgroundColor={theme.secundaryColorDark}>\n        <GameLayout onThemeChange={handleChangeTheme} />\n      </StyledApp>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}