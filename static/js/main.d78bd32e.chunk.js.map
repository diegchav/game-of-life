{"version":3,"sources":["components/styles/StyledGameTitle.js","components/GameTitle.js","components/styles/StyledGridCell.js","components/GridCell.js","components/styles/StyledGridRow.js","components/GridRow.js","components/styles/StyledGameGrid.js","components/GameGrid.js","components/styles/StyledSlider.js","components/Slider.js","components/styles/StyledGameControls.js","constants/index.js","components/GameControls.js","components/styles/StyledGameLayout.js","helpers/game.helpers.js","components/GameLayout.js","App.js","serviceWorker.js","index.js"],"names":["StyledGameTitle","styled","div","props","theme","backgroundColor","defaultProps","GameTitle","StyledGridCell","borderColor","aliveBackground","deadBackground","GridCell","value","className","StyledGridRow","width","GridRow","row","length","map","cell","i","key","StyledGameGrid","height","GameGrid","grid","StyledSlider","labelColor","labelSize","trackBackground","thumbBackground","Slider","label","min","max","step","onChange","type","StyledGameControls","GRID_SIZE","MIN_UPDATE_INTERVAL","MAX_UPDATE_INTERVAL","UPDATE_INTERVAL","GameControls","gridSize","speed","changeGridSize","changeUpdateSpeed","StyledGameLayout","rgbBoxShadow","generateGrid","Array","from","generatePopulation","oldPopulation","oldPopulationWidth","oldPopulationHeight","j","Math","floor","random","getNumAliveNeighbors","x","y","maxWidth","maxHeight","numAliveNeighbors","updatePopulation","newPopulation","GameLayout","state","event","newGridSize","parseInt","target","setState","newInterval","clearInterval","interval","setInterval","this","React","Component","StyledApp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d78bd32e.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst StyledGameTitle = styled.div`\n  background: ${props => props.theme.backgroundColor};\n  width: 100%;\n  text-align: center;\n`;\n\nStyledGameTitle.defaultProps = {\n  theme: {\n    backgroundColor: '#00838f'\n  }\n};\n\nexport default StyledGameTitle;","import React from 'react';\n\nimport StyledGameTitle from './styles/StyledGameTitle';\n\nconst GameTitle = () => (\n  <StyledGameTitle>\n    <p>Game of Life</p>\n  </StyledGameTitle>\n);\n\nexport default GameTitle;","import styled from 'styled-components';\n\nconst StyledGridCell = styled.div`\n  /* border: 1px solid ${props => props.theme.borderColor}; */\n\n  &.alive {\n    background: ${props => props.theme.aliveBackground};\n  }\n\n  &.dead {\n    background: ${props => props.theme.deadBackground};\n  }\n`;\n\nStyledGridCell.defaultProps = {\n  theme: {\n    aliveBackground: '#4fb3bf',\n    deadBackground: '#fff',\n    borderColor: '#005662'\n  }\n};\n\nexport default StyledGridCell;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport StyledGridCell from './styles/StyledGridCell';\n\nconst GridCell = ({ value }) => (\n  <StyledGridCell className={value ? 'alive' : 'dead'} />\n);\n\nGridCell.propTypes = {\n  value: PropTypes.number.isRequired\n};\n\nexport default GridCell;","import styled from 'styled-components';\n\nconst StyledGridRow = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 0;\n`;\n\nexport default StyledGridRow;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GridCell from './GridCell';\n\nimport StyledGridRow from './styles/StyledGridRow';\n\nconst GridRow = ({ row }) => (\n  <StyledGridRow width={row.length}>\n    {row.map((cell, i) => <GridCell key={i} value={cell} />)}\n  </StyledGridRow>\n);\n\nGridRow.propTypes = {\n  row: PropTypes.array.isRequired\n};\n\nexport default GridRow;","import styled from 'styled-components';\n\nconst StyledGameGrid = styled.div`\n  display: grid;\n  grid-template-rows: repeat(${props => props.height}, 1fr);\n  grid-gap: 0;\n  width: 100%;\n  height: 80vh;\n`;\n\nexport default StyledGameGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GridRow from './GridRow';\n\nimport StyledGameGrid from './styles/StyledGameGrid';\n\nconst GameGrid = ({ grid }) => (\n  <StyledGameGrid height={grid.length}>\n    {grid.map((row, i) => <GridRow key={i} row={row} />)}\n  </StyledGameGrid>\n);\n\nGameGrid.propTypes = {\n  grid: PropTypes.array.isRequired\n};\n\nexport default GameGrid;","import styled from 'styled-components';\n\nconst StyledSlider = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0 5px;\n\n  span {\n    margin-right: 5px;\n    color: ${props => props.labelColor};\n    font-size: ${props => props.labelSize};\n  }\n\n  input[type=range] {\n    -webkit-appearance: none;\n    background: transparent;\n    margin: 0;\n    padding: 0;\n  }\n\n  input[type=range]:focus {\n    outline: none;\n  }\n\n  /* Track  */\n  input[type=range]::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    box-shadow: 0px 0px 0px #000;\n    background: ${props => props.trackBackground};\n  }\n\n  input[type=range]::-moz-range-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    box-shadow: 0px 0px 0px #000;\n    background: ${props => props.trackBackground};\n  }\n\n  input[type=range]::-ms-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    background: transparent;\n    border-color: transparent;\n    color: transparent;\n  }\n\n  input[type=range]::-ms-fill-lower {\n    background: ${props => props.trackBackground};\n    border: 0px solid #000;\n    box-shadow: 0px 0px 0px #000;\n  }\n\n  input[type=range]::-ms-fill-upper {\n    background: ${props => props.trackBackground};\n    border: 0px solid #000;\n    box-shadow: 0px 0px 0px #000;\n  }\n\n  /* Thumb  */\n  input[type=range]::-webkit-slider-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    -webkit-appearance: none;\n    margin-top: -5px;\n  }\n\n  input[type=range]::-moz-range-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    margin-top: -5px;\n  }\n\n  input[type=range]::-ms-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    margin-top: -5px;\n  }\n`;\n\nStyledSlider.defaultProps = {\n  trackBackground: '#9ea7aa',\n  thumbBackground: '#cfd8dc',\n  labelColor: '#9ea7aa',\n  labelSize: '0.75rem'\n};\n\nexport default StyledSlider;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport StyledSlider from './styles/StyledSlider';\n\nconst Slider = ({ label, min, max, step, value, trackBackground, thumbBackground, onChange }) => (\n  <StyledSlider trackBackground={trackBackground} thumbBackground={thumbBackground}>\n    <span>\n      {label}\n    </span>\n    <input\n      type=\"range\"\n      min={min}\n      max={max}\n      step={step}\n      value={value}\n      onChange={onChange} />\n  </StyledSlider>\n);\n\nSlider.propTypes = {\n  label: PropTypes.string.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  trackBackground: PropTypes.string,\n  thumbBackground: PropTypes.string\n};\n\nexport default Slider;","import styled from 'styled-components';\n\nconst StyledGameControls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n  height: 20px;\n  padding: 15px 0;\n  background: ${props => props.theme.backgroundColor};\n`;\n\nStyledGameControls.defaultProps = {\n  theme: {\n    backgroundColor: '#f5f5f6'\n  }\n};\n\nexport default StyledGameControls;","export const MIN_GRID_SIZE = 10;\nexport const MAX_GRID_SIZE = 50;\nexport const GRID_SIZE = 30;\nexport const GRID_SIZE_STEP = 10;\n\nexport const MIN_UPDATE_INTERVAL = 100;\nexport const MAX_UPDATE_INTERVAL = 900;\nexport const UPDATE_INTERVAL = 500;\nexport const UPDATE_INTERVAL_STEP = 200;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Slider from './Slider';\n\nimport StyledGameControls from './styles/StyledGameControls';\n\nimport {\n  MIN_GRID_SIZE,\n  MAX_GRID_SIZE,\n  GRID_SIZE_STEP,\n  MIN_UPDATE_INTERVAL,\n  MAX_UPDATE_INTERVAL,\n  UPDATE_INTERVAL_STEP\n} from '../constants';\n\nconst GameControls = ({ gridSize, speed, changeGridSize, changeUpdateSpeed }) => (\n  <StyledGameControls>\n    <Slider\n      label=\"Grid Size\"\n      min={MIN_GRID_SIZE}\n      max={MAX_GRID_SIZE}\n      step={GRID_SIZE_STEP}\n      value={gridSize}\n      trackBackground=\"#4fb3bf\"\n      thumbBackground=\"#00838f\"\n      onChange={changeGridSize} />\n    <Slider\n      label=\"Speed\"\n      min={MIN_UPDATE_INTERVAL}\n      max={MAX_UPDATE_INTERVAL}\n      step={UPDATE_INTERVAL_STEP}\n      value={speed}\n      trackBackground=\"#4fb3bf\"\n      thumbBackground=\"#00838f\"\n      onChange={changeUpdateSpeed} />\n  </StyledGameControls>\n);\n\nGameControls.propTypes = {\n  gridSize: PropTypes.number.isRequired,\n  speed: PropTypes.number.isRequired,\n  changeGridSize: PropTypes.func.isRequired,\n  changeUpdateSpeed: PropTypes.func.isRequired\n};\n\nexport default GameControls;","import styled from 'styled-components';\n\nconst StyledGameLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 70vw;\n  -webkit-box-shadow: 0 0 8px 8px rgba(${props => props.theme.rgbBoxShadow}, 0.5);\n  -moz-box-shadow: 0 0 8px 8px rgba(${props => props.theme.rgbBoxShadow}, 0.5);\n  box-shadow: 0 0 8px 8px rgba(${props => props.theme.rgbBoxShadow}, 0.5);\n`;\n\nStyledGameLayout.defaultProps = {\n  theme: {\n    rgbBoxShadow: '0, 54, 58'\n  }\n};\n\nexport default StyledGameLayout;","export const generateGrid = gridSize => {\n  const grid = Array.from(Array(gridSize), () =>\n    new Array(gridSize));\n\n  return grid;\n}\n\nexport const generatePopulation = (gridSize, oldPopulation = null) => {\n  const grid = generateGrid(gridSize);\n  const oldPopulationWidth = (oldPopulation && oldPopulation.length) || 0;\n  const oldPopulationHeight = (oldPopulation && oldPopulation[0].length) || 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      // Eiter populate a random value or get it from the old population.\n      if (oldPopulation && i < oldPopulationWidth && j < oldPopulationHeight) {\n        grid[i][j] = oldPopulation[i][j];\n      } else {\n        grid[i][j] = Math.floor(Math.random() * 2);\n      }\n    }\n  }\n  return grid;\n};\n\nconst getNumAliveNeighbors = (grid, x, y) => {\n  const maxWidth = grid.length - 1;\n  const maxHeight = grid[0].length - 1;\n  let numAliveNeighbors = 0;\n  for (let i = Math.max(0, x - 1); i <= Math.min(x + 1, maxWidth); i++) {\n    for (let j = Math.max(0, y - 1); j <= Math.min(y + 1, maxHeight); j++) {\n      numAliveNeighbors += grid[i][j];\n    }\n  }\n  return numAliveNeighbors - grid[x][y];\n};\n\nexport const updatePopulation = (oldPopulation) => {\n  const newPopulation = [...oldPopulation];\n  for (let i = 0; i < newPopulation.length; i++) {\n    for (let j = 0; j < newPopulation[0].length; j++) {\n      const numAliveNeighbors = getNumAliveNeighbors(oldPopulation, i, j);\n      if (oldPopulation[i][j]) {\n        if (numAliveNeighbors <= 1) {\n          newPopulation[i][j] = 0;\n        } else if (numAliveNeighbors >= 4) {\n          newPopulation[i][j] = 0;\n        } else {\n          newPopulation[i][j] = 1;\n        }\n      } else {\n        if (numAliveNeighbors === 3) {\n          newPopulation[i][j] = 1;\n        }\n      }\n    }\n  }\n  return newPopulation;\n};","import React from 'react';\n\nimport GameTitle from './GameTitle';\nimport GameGrid from './GameGrid';\nimport GameControls from './GameControls';\n\nimport StyledGameLayout from './styles/StyledGameLayout';\n\nimport { generatePopulation, updatePopulation } from '../helpers/game.helpers';\n\nimport {\n  GRID_SIZE,\n  UPDATE_INTERVAL,\n  MIN_UPDATE_INTERVAL,\n  MAX_UPDATE_INTERVAL\n} from '../constants';\n\nclass GameLayout extends React.Component {\n  state = {\n    gridSize: GRID_SIZE,\n    grid: generatePopulation(GRID_SIZE),\n    speed: UPDATE_INTERVAL\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({ grid: updatePopulation(this.state.grid) });\n    }, (MAX_UPDATE_INTERVAL + MIN_UPDATE_INTERVAL - UPDATE_INTERVAL));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  changeGridSize = (event) => {\n    const newGridSize = parseInt(event.target.value);\n    const oldPopulation = [...this.state.grid];\n    const newPopulation = generatePopulation(newGridSize, oldPopulation);\n    this.setState({ gridSize: newGridSize, grid: newPopulation });\n  };\n\n  changeUpdateSpeed = (event) => {\n    const newInterval = parseInt(event.target.value);\n\n    clearInterval(this.interval);\n    this.interval = setInterval(() => {\n      this.setState({\n        grid: updatePopulation(this.state.grid)\n      });\n    }, (MAX_UPDATE_INTERVAL + MIN_UPDATE_INTERVAL - newInterval));\n\n    this.setState({ speed: newInterval });\n  };\n\n  render() {\n    const { grid, gridSize, speed } = this.state;\n    return (\n      <StyledGameLayout>\n        <GameTitle />\n        <GameGrid grid={grid} />\n        <GameControls\n          gridSize={gridSize}\n          speed={speed}\n          changeGridSize={this.changeGridSize}\n          changeUpdateSpeed={this.changeUpdateSpeed} />\n      </StyledGameLayout>\n    );\n  }\n}\n\nexport default GameLayout;","import React from 'react';\nimport styled from 'styled-components';\n\nimport GameLayout from './components/GameLayout';\n\nconst StyledApp = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  background: ${props => props.theme.backgroundColor};\n`;\n\nStyledApp.defaultProps = {\n  theme: {\n    backgroundColor: '#005662'\n  }\n};\n\nconst  App = () => (\n  <StyledApp>\n    <GameLayout />\n  </StyledApp>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}