{"version":3,"sources":["constants/index.js","providers/Theme.js","helpers/theme.helpers.js","components/styles/StyledGameTitle.js","components/GameTitle.js","components/styles/StyledGridCell.js","components/GridCell.js","components/styles/StyledGridRow.js","components/GridRow.js","components/styles/StyledGameGrid.js","components/GameGrid.js","components/styles/StyledSlider.js","components/Slider.js","components/styles/StyledColorPicker.js","components/ColorPicker.js","components/styles/StyledGameControls.js","components/GameControls.js","components/styles/StyledGameLayout.js","helpers/game.helpers.js","components/GameLayout.js","App.js","serviceWorker.js","index.js"],"names":["GRID_SIZE","MIN_UPDATE_INTERVAL","MAX_UPDATE_INTERVAL","UPDATE_INTERVAL","THEMES","name","primaryColor","secundaryColorLight","secundaryColorDark","ThemeContext","createContext","theme","changeTheme","ThemeProvider","children","useState","themeColors","Object","keys","randomTheme","Math","floor","random","length","getRandomTheme","setTheme","Provider","value","StyledGameTitle","styled","div","props","backgroundColor","propTypes","PropTypes","string","isRequired","GameTitle","useContext","StyledGridCell","aliveBackground","deadBackground","defaultProps","GridCell","className","StyledGridRow","width","GridRow","row","map","cell","i","key","StyledGameGrid","height","GameGrid","grid","StyledSlider","labelColor","labelSize","trackBackground","thumbBackground","Slider","label","min","max","step","onChange","type","StyledColorPicker","optionsBorderColor","ColorPicker","currentColor","colors","onPickColor","showOptions","setShowOptions","onMouseLeave","color","style","onClick","handlePickColor","StyledGameControls","GameControls","gridSize","speed","onChangeGridSize","onChangeSpeed","StyledGameLayout","generateGrid","Array","from","generatePopulation","oldPopulation","oldPopulationWidth","oldPopulationHeight","j","getNumAliveNeighbors","x","y","maxWidth","maxHeight","numAliveNeighbors","updatePopulation","newPopulation","GameLayout","onThemeChange","setGrid","setGridSize","setSpeed","useEffect","interval","setInterval","clearInterval","event","newGridSize","parseInt","target","newInterval","StyledApp","App","Boolean","window","location","hostname","match","ReactDOM","render","Theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.339493c3.chunk.js","sourcesContent":["// Grid\nexport const MIN_GRID_SIZE = 10;\nexport const MAX_GRID_SIZE = 50;\nexport const GRID_SIZE = 30;\nexport const GRID_SIZE_STEP = 10;\n\n// Update speed\nexport const MIN_UPDATE_INTERVAL = 100;\nexport const MAX_UPDATE_INTERVAL = 900;\nexport const UPDATE_INTERVAL = 500;\nexport const UPDATE_INTERVAL_STEP = 200;\n\n// Theme\nexport const THEME_GREEN = 'green';\nexport const THEME_PURPLE = 'purple';\nexport const THEME_BLUE = 'blue';\nexport const THEME_GREY = 'grey';\nexport const THEME_RED = 'red';\nexport const THEME_ORANGE = 'orange';\nexport const THEMES = {\n  [THEME_GREEN]: {\n    name: THEME_GREEN,\n    primaryColor: '#00838f',\n    secundaryColorLight: '#4fb3bf',\n    secundaryColorDark: '#005662'\n  },\n  [THEME_PURPLE]: {\n    primaryColor: '#9c27b0',\n    secundaryColorLight: '#d05ce3',\n    secundaryColorDark: '#6a0080'\n  },\n  [THEME_BLUE]: {\n    primaryColor: '#01579b',\n    secundaryColorLight: '#4f83cc',\n    secundaryColorDark: '#002f6c'\n  },\n  [THEME_GREY]: {\n    primaryColor: '#37474f',\n    secundaryColorLight: '#62727b',\n    secundaryColorDark: '#102027'\n  },\n  [THEME_RED]: {\n    primaryColor: '#b71c1c',\n    secundaryColorLight: '#f05545',\n    secundaryColorDark: '#7f0000'\n  },\n  [THEME_ORANGE]: {\n    primaryColor: '#f57f17',\n    secundaryColorLight: '#ffb04c',\n    secundaryColorDark: '#bc5100'\n  }\n};","import React, { createContext, useState } from 'react';\n\nimport { getRandomTheme } from '../helpers/theme.helpers';\n\nimport {\n  THEMES\n} from '../constants';\n\nexport const ThemeContext = createContext({\n  theme: null,\n  changeTheme: () => {}\n});\n\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(getRandomTheme());\n  const changeTheme = theme => setTheme(THEMES[theme]);\n\n  return (\n    <ThemeContext.Provider value={{\n      theme,\n      changeTheme\n    }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;","import {\n  THEMES\n} from '../constants';\n\nexport const getRandomTheme = () => {\n  const themeColors = Object.keys(THEMES);\n  const randomTheme = themeColors[Math.floor(Math.random() * themeColors.length)];\n  return THEMES[randomTheme];\n};\n\n/*\n* Convert a color represented in hexadecimal into its rgb equivalent.\n*\n* Ex: 'eb4034' -> '235, 64, 52'\n*/\nexport const hexColor2Rgb = (hexColor) => {\n  // Remove hash symbol.\n  hexColor = hexColor.replace(/#/g, '');\n\n  // Accept only 6-digit hex colors.\n  if (hexColor.length !== 6) {\n    throw new Error('Invalid hex color: ', hexColor);\n  }\n\n  const r = parseInt(hexColor, 16) >> 16;\n  const g = (parseInt(hexColor, 16) >> 8) & 255;\n  const b = parseInt(hexColor, 16) & 255;\n\n  return `${r}, ${g}, ${b}`;\n};\n\nexport const getThemeColors = () => (\n  Object.keys(THEMES).map(key => {\n    return {\n      name: key,\n      color: THEMES[key].primaryColor\n    };\n  })\n);","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledGameTitle = styled.div`\n  background: ${props => props.backgroundColor};\n  width: 100%;\n  text-align: center;\n`;\n\nStyledGameTitle.propTypes = {\n  backgroundColor: PropTypes.string.isRequired\n};\n\nexport default StyledGameTitle;","import React, { useContext } from 'react';\n\nimport { ThemeContext } from '../providers/Theme';\n\nimport StyledGameTitle from './styles/StyledGameTitle';\n\nconst GameTitle = () => {\n  const { theme } = useContext(ThemeContext);\n  return (\n    <StyledGameTitle backgroundColor={theme.primaryColor}>\n      <p>Game of Life</p>\n    </StyledGameTitle>\n  );\n};\n\nexport default GameTitle;","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledGridCell = styled.div`\n  &.alive {\n    background: ${props => props.aliveBackground};\n  }\n\n  &.dead {\n    background: ${props => props.deadBackground};\n  }\n`;\n\nStyledGridCell.defaultProps = {\n  deadBackground: '#fff'\n};\n\nStyledGridCell.propTypes = {\n  aliveBackground: PropTypes.string.isRequired\n};\n\nexport default StyledGridCell;","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ThemeContext } from '../providers/Theme';\n\nimport StyledGridCell from './styles/StyledGridCell';\n\nconst GridCell = ({ value }) => {\n  const { theme } = useContext(ThemeContext);\n  return (\n    <StyledGridCell\n      className={value ? 'alive' : 'dead'}\n      aliveBackground={theme.secundaryColorLight} />\n  );\n};\n\nGridCell.propTypes = {\n  value: PropTypes.number.isRequired\n};\n\nexport default GridCell;","import styled from 'styled-components';\n\nconst StyledGridRow = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 0;\n`;\n\nexport default StyledGridRow;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GridCell from './GridCell';\n\nimport StyledGridRow from './styles/StyledGridRow';\n\nconst GridRow = ({ row }) => (\n  <StyledGridRow width={row.length}>\n    {row.map((cell, i) => <GridCell key={i} value={cell} />)}\n  </StyledGridRow>\n);\n\nGridRow.propTypes = {\n  row: PropTypes.array.isRequired\n};\n\nexport default GridRow;","import styled from 'styled-components';\n\nconst StyledGameGrid = styled.div`\n  display: grid;\n  grid-template-rows: repeat(${props => props.height}, 1fr);\n  grid-gap: 0;\n  width: 100%;\n  height: 80vh;\n`;\n\nexport default StyledGameGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GridRow from './GridRow';\n\nimport StyledGameGrid from './styles/StyledGameGrid';\n\nconst GameGrid = ({ grid }) => (\n  <StyledGameGrid height={grid.length}>\n    {grid.map((row, i) => <GridRow key={i} row={row} />)}\n  </StyledGameGrid>\n);\n\nGameGrid.propTypes = {\n  grid: PropTypes.array.isRequired\n};\n\nexport default GameGrid;","import styled from 'styled-components';\n\nconst StyledSlider = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0 5px;\n\n  span {\n    margin-right: 5px;\n    color: ${props => props.labelColor};\n    font-size: ${props => props.labelSize};\n  }\n\n  input[type=range] {\n    -webkit-appearance: none;\n    background: transparent;\n    margin: 0;\n    padding: 0;\n  }\n\n  input[type=range]:focus {\n    outline: none;\n  }\n\n  /* Track  */\n  input[type=range]::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    box-shadow: 0px 0px 0px #000;\n    background: ${props => props.trackBackground};\n  }\n\n  input[type=range]::-moz-range-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    box-shadow: 0px 0px 0px #000;\n    background: ${props => props.trackBackground};\n  }\n\n  input[type=range]::-ms-track {\n    width: 100%;\n    height: 4px;\n    margin: 8px 0;\n    cursor: pointer;\n    animate: 0.2s;\n    background: transparent;\n    border-color: transparent;\n    color: transparent;\n  }\n\n  input[type=range]::-ms-fill-lower {\n    background: ${props => props.trackBackground};\n    border: 0px solid #000;\n    box-shadow: 0px 0px 0px #000;\n  }\n\n  input[type=range]::-ms-fill-upper {\n    background: ${props => props.trackBackground};\n    border: 0px solid #000;\n    box-shadow: 0px 0px 0px #000;\n  }\n\n  /* Thumb  */\n  input[type=range]::-webkit-slider-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    -webkit-appearance: none;\n    margin-top: -5px;\n  }\n\n  input[type=range]::-moz-range-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    margin-top: -5px;\n  }\n\n  input[type=range]::-ms-thumb {\n    box-shadow: 0px 0px 0px #000;\n    height: 15px;\n    width: 15px;\n    border-radius: 20px;\n    background: ${props => props.thumbBackground};\n    cursor: pointer;\n    margin-top: -5px;\n  }\n`;\n\nStyledSlider.defaultProps = {\n  trackBackground: '#9ea7aa',\n  thumbBackground: '#cfd8dc',\n  labelColor: '#9ea7aa',\n  labelSize: '0.75rem'\n};\n\nexport default StyledSlider;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport StyledSlider from './styles/StyledSlider';\n\nconst Slider = ({ label, min, max, step, value, trackBackground, thumbBackground, onChange }) => (\n  <StyledSlider trackBackground={trackBackground} thumbBackground={thumbBackground}>\n    <span>\n      {label}\n    </span>\n    <input\n      type=\"range\"\n      min={min}\n      max={max}\n      step={step}\n      value={value}\n      onChange={onChange} />\n  </StyledSlider>\n);\n\nSlider.propTypes = {\n  label: PropTypes.string.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  trackBackground: PropTypes.string,\n  thumbBackground: PropTypes.string\n};\n\nexport default Slider;","import styled from 'styled-components';\n\nconst StyledColorPicker = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0 5px;\n  position: relative;\n\n  span {\n    margin-right: 5px;\n    color: ${props => props.labelColor};\n    font-size: ${props => props.labelSize};\n  }\n\n  div.color-options {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    border: 1px solid ${props => props.optionsBorderColor};\n    position: absolute;\n    left: 45px;\n    bottom: -20px;\n    background-color: #fff;\n  }\n\n  div.color-option {\n    width: 20px;\n    height: 20px;\n    margin: 5px;\n    border-radius: 3px;\n    cursor: pointer;\n  }\n\n  div.color-option:hover {\n    opacity: 0.5;\n  }\n\n  div.current-color {\n    width: 20px;\n    height: 20px;\n    border-radius: 3px;\n    cursor: pointer;\n  }\n\n  div.current-color:hover {\n    opacity: 0.5;\n  }\n`;\n\nStyledColorPicker.defaultProps = {\n  labelColor: '#9ea7aa',\n  labelSize: '0.75rem',\n  optionsBorderColor: '#9ea7aa'\n};\n\nexport default StyledColorPicker;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport StyledColorPicker from './styles/StyledColorPicker';\n\nconst ColorPicker = ({ label = null, currentColor, colors, onPickColor }) => {\n  const [showOptions, setShowOptions] = useState(false);\n\n  const handlePickColor = (color) => {\n    onPickColor(color);\n  };\n\n  const handleShowOptions = () => {\n    setShowOptions(!showOptions);\n  };\n\n  const handleCloseOptions = () => {\n    setShowOptions(false);\n  };\n\n  return (\n    <StyledColorPicker backgroundColor={currentColor}>\n      {label\n        ? <span>{label}</span>\n        : null\n      }\n      {showOptions\n        ? <div className=\"color-options\" onMouseLeave={handleCloseOptions}>\n            {colors.map(color => (\n              <div\n                key={color.name}\n                className=\"color-option\"\n                style={{ backgroundColor: color.color }}\n                onClick={() => handlePickColor(color.name)}\n              >\n              </div>\n            ))}\n          </div>\n        : <div\n            className=\"current-color\"\n            style={{ backgroundColor: currentColor }}\n            onClick={handleShowOptions}\n          ></div>\n      }\n    </StyledColorPicker>\n  );\n};\n\nColorPicker.propTypes = {\n  currentColor: PropTypes.string.isRequired,\n  colors: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired\n  })),\n  onPickColor: PropTypes.func.isRequired\n};\n\nexport default ColorPicker;","import styled from 'styled-components';\n\nconst StyledGameControls = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n  height: 20px;\n  padding: 15px 0;\n  background: ${props => props.theme.backgroundColor};\n`;\n\nStyledGameControls.defaultProps = {\n  theme: {\n    backgroundColor: '#f5f5f6'\n  }\n};\n\nexport default StyledGameControls;","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Slider from './Slider';\nimport ColorPicker from './ColorPicker';\n\nimport { ThemeContext } from '../providers/Theme';\n\nimport { getThemeColors } from '../helpers/theme.helpers';\n\nimport StyledGameControls from './styles/StyledGameControls';\n\nimport {\n  MIN_GRID_SIZE,\n  MAX_GRID_SIZE,\n  GRID_SIZE_STEP,\n  MIN_UPDATE_INTERVAL,\n  MAX_UPDATE_INTERVAL,\n  UPDATE_INTERVAL_STEP\n} from '../constants';\n\nconst themeColors = getThemeColors();\n\nconst GameControls = ({ gridSize, speed, onChangeGridSize, onChangeSpeed }) => {\n  const { theme, changeTheme } = useContext(ThemeContext);\n  return (\n    <StyledGameControls>\n      <Slider\n        label=\"Grid Size\"\n        min={MIN_GRID_SIZE}\n        max={MAX_GRID_SIZE}\n        step={GRID_SIZE_STEP}\n        value={gridSize}\n        trackBackground={theme.secundaryColorLight}\n        thumbBackground={theme.primaryColor}\n        onChange={onChangeGridSize} />\n      <Slider\n        label=\"Speed\"\n        min={MIN_UPDATE_INTERVAL}\n        max={MAX_UPDATE_INTERVAL}\n        step={UPDATE_INTERVAL_STEP}\n        value={speed}\n        trackBackground={theme.secundaryColorLight}\n        thumbBackground={theme.primaryColor}\n        onChange={onChangeSpeed} />\n      <ColorPicker\n        label=\"Theme\"\n        currentColor={theme.primaryColor}\n        colors={themeColors}\n        onPickColor={changeTheme} />\n    </StyledGameControls>\n  )\n};\n\nGameControls.propTypes = {\n  gridSize: PropTypes.number.isRequired,\n  speed: PropTypes.number.isRequired,\n  onChangeGridSize: PropTypes.func.isRequired,\n  onChangeSpeed: PropTypes.func.isRequired\n};\n\nexport default GameControls;","import styled from 'styled-components';\n\nconst StyledGameLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 70vw;\n`;\n\nexport default StyledGameLayout;","export const generateGrid = gridSize => {\n  const grid = Array.from(Array(gridSize), () =>\n    new Array(gridSize));\n\n  return grid;\n}\n\nexport const generatePopulation = (gridSize, oldPopulation = null) => {\n  const grid = generateGrid(gridSize);\n  const oldPopulationWidth = (oldPopulation && oldPopulation.length) || 0;\n  const oldPopulationHeight = (oldPopulation && oldPopulation[0].length) || 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      // Eiter populate a random value or get it from the old population.\n      if (oldPopulation && i < oldPopulationWidth && j < oldPopulationHeight) {\n        grid[i][j] = oldPopulation[i][j];\n      } else {\n        grid[i][j] = Math.floor(Math.random() * 2);\n      }\n    }\n  }\n  return grid;\n};\n\nconst getNumAliveNeighbors = (grid, x, y) => {\n  const maxWidth = grid.length - 1;\n  const maxHeight = grid[0].length - 1;\n  let numAliveNeighbors = 0;\n  for (let i = Math.max(0, x - 1); i <= Math.min(x + 1, maxWidth); i++) {\n    for (let j = Math.max(0, y - 1); j <= Math.min(y + 1, maxHeight); j++) {\n      numAliveNeighbors += grid[i][j];\n    }\n  }\n  return numAliveNeighbors - grid[x][y];\n};\n\nexport const updatePopulation = (oldPopulation) => {\n  const newPopulation = [...oldPopulation];\n  for (let i = 0; i < newPopulation.length; i++) {\n    for (let j = 0; j < newPopulation[0].length; j++) {\n      const numAliveNeighbors = getNumAliveNeighbors(oldPopulation, i, j);\n      if (oldPopulation[i][j]) {\n        if (numAliveNeighbors <= 1) {\n          newPopulation[i][j] = 0;\n        } else if (numAliveNeighbors >= 4) {\n          newPopulation[i][j] = 0;\n        } else {\n          newPopulation[i][j] = 1;\n        }\n      } else {\n        if (numAliveNeighbors === 3) {\n          newPopulation[i][j] = 1;\n        }\n      }\n    }\n  }\n  return newPopulation;\n};","import React, { useState, useEffect } from 'react';\n\nimport GameTitle from './GameTitle';\nimport GameGrid from './GameGrid';\nimport GameControls from './GameControls';\n\nimport StyledGameLayout from './styles/StyledGameLayout';\n\nimport { generatePopulation, updatePopulation } from '../helpers/game.helpers';\n\nimport {\n  GRID_SIZE,\n  UPDATE_INTERVAL,\n  MIN_UPDATE_INTERVAL,\n  MAX_UPDATE_INTERVAL\n} from '../constants';\n\nfunction GameLayout({ onThemeChange }) {\n  const [ grid, setGrid ] = useState(generatePopulation(GRID_SIZE));\n  const [ gridSize, setGridSize ] = useState(GRID_SIZE);\n  const [ speed, setSpeed ] = useState(UPDATE_INTERVAL);\n\n  // Update grid every 'speed' milliseconds.\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setGrid(updatePopulation(grid));\n    }, (MAX_UPDATE_INTERVAL + MIN_UPDATE_INTERVAL - speed));\n\n    return () => clearInterval(interval);\n  });\n\n  function handleChangeGridSize(event) {\n    const newGridSize = parseInt(event.target.value);\n    const oldPopulation = [...grid];\n    const newPopulation = generatePopulation(newGridSize, oldPopulation);\n    setGridSize(newGridSize);\n    setGrid(newPopulation);\n  };\n\n  function handleChangeSpeed(event) {\n    const newInterval = parseInt(event.target.value);\n    setSpeed(newInterval);\n  };\n  \n  return (\n    <StyledGameLayout>\n      <GameTitle />\n      <GameGrid grid={grid} />\n      <GameControls\n        gridSize={gridSize}\n        speed={speed}\n        onChangeGridSize={handleChangeGridSize}\n        onChangeSpeed={handleChangeSpeed} />\n    </StyledGameLayout>\n  );\n}\n\nexport default GameLayout;","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from'prop-types';\n\nimport GameLayout from './components/GameLayout';\n\nimport { ThemeContext } from './providers/Theme';\n\nconst StyledApp = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  background: ${props => props.backgroundColor};\n`;\n\nStyledApp.propTypes = {\n  backgroundColor: PropTypes.string.isRequired\n};\n\nfunction App() {\n  const { theme } = useContext(ThemeContext);\n\n  return (\n    <StyledApp backgroundColor={theme.secundaryColorDark}>\n      <GameLayout />\n    </StyledApp>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport ThemeProvider from './providers/Theme';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}